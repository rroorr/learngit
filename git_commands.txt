
===================== 基本操作 ==========================

mkdir 目录名    创建目录
cd 目录名   	切换到目录
pwd  			显示当前目录

git init 						把当前目录变成Git仓库
git add	file1.txt file2.txt		把file1.txt和file2.txt添加到暂存区	
git add .						把所有修改文件以及未跟踪新添加的文件添加到暂存区，注意"."前面有空格
								注意：1）不包括删除。2）包含目录中的所有文件夹（含文件夹里的文件）
								
git add *						同 git add .
git add -u .					将所有已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意"."前面有空格
git add -A .					将所有的已跟踪的文件的修改与删除、和新增的未跟踪的文件都添加到暂存区，
								注意"."前面有空格
								
git add 文件夹					把指定的文件夹添加到暂存区
git reset HEAD +				取消添加

git commit -m "注释"			把暂存区文件提交到仓库


====================== 版本回退：=========================
git reset --hard HEAD^
git reset --hard HEAD^^
git reset --hard HEAD~100
git reset --hard 版本号
git reset --soft 版本号

git reflog 查询命令历史，包括commit、checkout、reset等，能查到每次提交的commit_id
q 	返回。当提示“No next tag (press RETURN)”时候，只需要输入q即可返回

git log				查看提交历史。可以加很多参数，比较有用的包括：
					--all 		查看所有分支的提交历史
					--oneline  	每次提交以一行显示
					--graph		以图形化方式显示分支
					
git log origin/master 	查看远程分支的提交历史，如果加上 --all, 则查看所有远程分支，不管写的是master还是其他
		

git diff 			比较工作区与暂存区的区别，可以后跟文件名指定要比较的文件，否则比较所有文件
git diff --cached	比较暂存区与版本库的区别，可以后跟文件名指定要比较的文件，否则比较所有文件
git diff HEAD 		查看工作区和版本库里最新版本的差异，可以后跟文件名指定要比较的文件，否则比较所有文件


关于撤销修改的命令（工作区文件被删除的情况等同于工作区文件被修改）：
git restore file.txt（等价于原 git checkout -- file.txt 命令）	
			把文件在工作区的修改全部撤销。
			1）如果暂存区有版本，则用暂存区里的版本替换工作区的版本
			2）如果暂存区没有版本，则用版本库里的版本替换工作区的版本。注意 -- 前后都有空格；
			如果修改已经提交到暂存区，则无法撤销修改，只能撤销上次add之后的修改

git restore --staged file.txt （等价于原 git reset HEAD file.txt 命令）		
			用版本库中的版本替换暂存区中的版本，工作区不受影响

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore file.txt
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，
第一步用命令git restore --staged file.txt，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，用git reset --hard 版本号


======================= 版本库中文件删除：======================

如果文件已经提交到版本库，那么在widonws的文件夹中删掉的文件，总是能够通过git restore 以及 
git restore --staged 命令把文件找回来。想要真正在版本库中把文件删掉，需要用 git rm 指令，
然后再commit，注意必须用git rm删除，在windows文件夹里删是不行的：
$ git rm file.txt
$ git commit -m "delete file.txt"
即使是这样，也只是从当前版本中删除了file.txt，其他版本中这个文件还是在的


======================== 远程仓库 ==============================

1） 先有本地仓库，后有远程仓库：

把当前仓库关联一个远程库
$ git remote add origin git@server-name:path/repo-name.git
具体到github，就是：
$ git remote add origin git@github.com:user-name/repo-name.git

关联后，使用命令 
git push -u origin master 第一次推送master分支的所有内容

以后每次本地提交后，可以使用
git push origin master 			推送master分支最新修改
git push origin dev:dev_remote 	把dev分支推送到服务器，并命名服务器端为dev_remote分支

git pull origin master 			从远程获取最新版本并merge到本地
git pull 						相当于 git fetch 和 git merge，如果分开进行，则可以用下面命令：
$ git fetch origin master:tmp 	从远程的origin仓库的master分支下载到本地并新建一个分支temp。
								注意tmp不是一个track branch
								
$ git diff tmp 					比较master分支和temp分支的不同
$ git merge tmp					合并temp分支到master分支


2） 先有远程仓库，然后把远程仓库克隆到本地

首先在服务器上建立git仓库，然后克隆本地库：
$ git clone git@github.com:user-name/repo-name.git
也可以使用：
$ git clone git://github.com/rroorr/learngit.git
以上是使用ssh协议，如果失败，可以尝试 https协议：
$ git clone https://github.com/user-name/repo-name.git

克隆注意：每个目录只能克隆一次，克隆到本地之后，默认只有master分支。如果想把其他远程分支也复制到
本地，只需要切换分支即可：git switch dev 或者 git checkout dev

如果git pull失败，提示There is no tracking information for the current branch，那么可以指定本地dev分支与
远程origin/dev分支的链接，用以下命令：
$ git branch --set-upstream-to=origin/dev dev

若多人协作开发，则每个人各自从远程克隆一份就可以了。

Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。使用https除了速度慢以外，
还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议
而只能用https

$ git remote -v  查看远程仓库，以及仓库的协议，运行后可以看到：
origin  git@github.com:rroorr/learngit.git (fetch)
origin  git@github.com:rroorr/learngit.git (push)
切换成https协议：
$ git remote set-url origin https://github.com/rroorr/learngit.git

冲突：
1） 如果push失败，因为其他人的最新提交和你试图推送的提交有冲突，解决办法是先用git pull把最新的提交从origin/dev抓下来，
然后，在本地合并，解决冲突，再推送。
2） 如果pull也失败，提示
$ git pull
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
说明没有指定本地dev分支与远程分支origin/dev分支的链接关系，用以下命令建立二者之间链接：
$ git branch --set-upstream-to=origin/dev dev

========================= 分支 =================================

创建分支：
git checkout -b branch-name  		创建branch-name分支，然后切换到该分支
git switch -c branch-name（推荐）	创建branch-name分支，并切换到该分支

等价于以下两条命令：
$ git branch branch-name		创建分支
$ git switch branch-name		切换到新创建的分支，switch用于替代老版本的checkout

git branch 						查看所有本地分支。会列出所有本地分支，在当前分支前面会标一个*号
git branch -r					查看所有远程分支
git branch -a					查看所有分支，包括远程分支和本地分支

git switch branch-name 			切换到指定分支（branch-name分支），替换原命令 git checkout branch-name
git merge branch-name			把指定分支（branch-name分支）合并到当前分支上

git branch -d branch-name		删除指定分支（branch-name分支）
git branch -D branch-name		强制删除本地分支，-D相当于--delete --force
git push origin --delete dev	删除远程dev分支

git branch -m old_name new_name		分支改名
git branch -M old_name new_name		强制改名

git cherry-pick	commit-number	把序号为commit-number的提交的修改复制到当前分支，也可以一次复制多个提交
								注意：在使用前，必须确保当前分支的修改已经提交。
								注意：会自动产生一个提交，这个提交与commit-number提交并不相同，
								而只是把这个提交所做的改动复制过来

把本地非master分支与远程分支建立关联：
								
必须使用git init命令创建仓库，执行git add . 和git commit（提交成功后）,再使用git branch命令，
才显示出本地分支因为git的分支必须指向一个commit，没有任何commit就没有任何分支,提交第一个
commit后git自动创建master分支							

==========================  存储工作区  =============================

git stash					把当前工作区暂存起来，工作区未add和commit的修改会被保存起来，然后工作区文件变成
							与当前分支的最新commit一致
git stash save "注释"		同git stash，增加注释以方便恢复时辨认stash版本
git stash pop				将堆栈顶端的stash应用到当前目录，并删除这个stash
git stash apply				将堆栈顶端的stash应用到当前目录，并保留这个stash
git stash apply stash@{0}	将序号{0}的stash应用到当前目录，并保留这个stash
git stash list				列出所有stash及其序号
git stash drop	stash@{0}	删除序号{0}的stash		
git stash clear				删除所有stash		

备注：默认情况下，git stash会跟踪以下文件：
1）添加到暂存区的修改（staged changes）
2）Git跟踪的但并未添加到暂存区的修改（unstaged changes）
但不会缓存以下文件：
1）在工作目录中新的文件（untracked files）
2）忽略的文件（ignored files）
git stash命令提供了参数用于缓存上面两种类型的文件。使用-u或者--include-untracked可以stash untracked文件。
使用-a或者--all命令可以stash当前目录下的所有修改

如果刚刚提交，工作区是干净的，那么stash就不会成功，提示"no local changes to save"，而这种情况也没有stash的必要

注意：使用stash之后，当前分支的工作区和暂存区都会被清空（跑到stash中去了），如果此时再stash drop或者stash clear
删除stash的话，会丢失未保存的修改！！

======================================================================

如果看到如下界面，可以按 Ctrl+X 退出
^G Get Help      ^O Write Out     ^W Where Is      ^K Cut Text      ^J Justify       ^C Cur Pos       ^Y Prev Page     M-\ First Line   M-W WhereIs Next
^X Exit          ^R Read File     ^\ Replace       ^U Uncut Text    ^T To Spell      ^_ Go To Line    ^V Next Page     M-/ Last Line    M-] To Bracket


在使用git log查看提交之后，需要按 q 退出



